import os
import subprocess
import shutil
import requests
from colorama import Fore, Back, Style
import datetime
from time import sleep,strftime


# this is going to be a little console app to display the knowledge 
def clean_json() -> None:
    """Clean the json files"""
    # change the directory to the json_files directory
    os.chdir("json_files")
    # get the current working directory
    cwd = os.getcwd()
    # get the list of files in the current working directory
    files = os.listdir(cwd)
    for file in files:
        if file.endswith(".json"):
            # delete the file
            os.remove(file)
    # change the directory back to the original directory
    os.chdir("..")
    print(f"{Fore.GREEN}{'':^105}Cleaned the json_files folder{Style.RESET_ALL}")
    return None

def clean_logs() -> None:
    """Cleans the logs folder"""
    # going to change directories
    os.chdir("logs")
    # get the current working directory
    cwd = os.getcwd()
    # get the list of files in the current working directory
    files = os.listdir(cwd)
    for f in files:
        if f.endswith(".log"):
            # delete the file
            os.remove(f)
    # change the directory back to the original directory
    os.chdir("..")
    print(f"{Fore.GREEN}{'':^105}Cleaned the logs folder{Style.RESET_ALL}")
    return None

def clean_screen() -> str:
    """Clean the screen"""
    os.system("cls")
    return None

def get_pwd() -> str:
    pwd = os.getcwd()
    print(f"{Fore.GREEN}{'':^86}{pwd}{Style.RESET_ALL}")
    return pwd

def get_ls() -> list:
    ls = os.listdir()
    # auto set if kb or mb
    
    for file in ls:
        if os.path.isfile(file):
            print(f"{Fore.GREEN}{'':^109}{file}{Style.RESET_ALL}")
        else:
            print(f"{Fore.BLUE}{'':^109}{file}{Style.RESET_ALL}")
    return None

def get_ip() -> str:
    """Get the current IP address"""
    with open(os.devnull, 'w') as devnull:
        ip = subprocess.check_output(['curl', 'ifconfig.me'], stderr=devnull).strip().decode('utf-8')
    print(f"{Fore.GREEN}{'':^103}Your ip: {ip}{Style.RESET_ALL}")
    # no backend, so don't worry about sending it off to some server to be stored,
    # and possibly sold to the highest bidder for some ad campaign, or whatever they do with it
    # also that was generated by the CoPilot not me :)
    return ip

def download(url:str) -> str:
    """Download a file from a url with a file """
    local_filename = url.split('/')[-1]
    with requests.get(url, stream=True) as r:
        with open(local_filename, 'wb') as f:
            shutil.copyfileobj(r.raw, f)
    return local_filename

def use_search_engine() -> str:
    """Use the search engine"""
    file = "ddgsred.py"
    if os.path.exists(file):
        os.system("ddgsred.py")
    else:
        download("https://gist.githubusercontent.com/AE-001-1001/22db01a2d36654cce3fde4a95be7e94e/raw/85c748c37fa9b7b44dc0c74ee4042ab283525fbe/ddgsred.py") 
        print(f"{'':^223}Downloaded {file} from github")
    return 0

def use_rmte() -> str:
    """Use the rmte.py script"""
    file = "Rmte.py"
    if os.path.exists(file):
        os.system("Rmte.py")
    else:
        download("https://gist.githubusercontent.com/AE-001-1001/a43375e8cb8c7ebb17b110d60d7ccaa6/raw/4c74c6658aa3cf980ec3a7ad916c5772a0b58af3/Rmte.py")
        print(f"Downloaded {'':^223}{file} from github")
    return 0

def internet_speed():
    """Check the internet speed"""
    # check if the user has speedtest installed
    # if the user has speedtest installed
    if os.path.exists("speedtest.exe"):
        # run the speedtest
        os.system("speedtest.exe")
        if os.path.exists("speedtest.exe"):
            try:
                # delete the zip file
                os.remove("ookla-speedtest-1.2.0-win64.zip")
                os.remove("speedtest.md")
            except:
                pass
    # if already installed don't ask the user if they want to install speedtest
    else:
        # download the speedtest
        # taken from my GUI that I made
        os.system("curl -O https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-win64.zip")
        # unzip the speedtest windows 64 bit
        os.system("tar -xvf ookla-speedtest-1.2.0-win64.zip")
        # run the speedtest
        os.system("speedtest.exe")
    return 0

def exit_program() -> str:
    exit()


def use_help_menu() -> str:
    """Use the help menu"""
    file = "help_menu.py"
    if os.path.exists(file):
        os.system("help_menu.py")
    else:
        download("https://gist.githubusercontent.com/AE-001-1001/66a580db9def1dc7879cf107a7006476/raw/97338d8abbb74b42b156c01c124e3d1a32f0abd4/help_menu.py")
        print(f"Downloaded {'':^223}{file} from github")
    return 0

def get_user_input() -> None:
    """Get the user's input for the commands defined above"""
    os.system("color")
    while True:
        command_functions = {
            "pwd": get_pwd,
            "ls": get_ls,
            "ip": get_ip,
            "rmte": use_rmte,
            "internet speed": internet_speed,
            "search": use_search_engine,
            "download": download,
            "clean_json": clean_json,
            "clean_logs": clean_logs,
            "clear": clean_screen,
            "help": use_help_menu,
            "exit": exit_program,
        }

        # Get the user's input command
        user_input = input(f"{Fore.MAGENTA}{'':^103}Enter a command{Fore.LIGHTWHITE_EX}: {Style.RESET_ALL}").lower()

        # Look up the command in the dictionary and call the associated function
        for command, func in command_functions.items():
            if command in user_input:
                func()
                break
        else:
            print("Invalid command")

def main() -> str:
    """The main function"""
    get_user_input()
    return 0

if __name__ == "__main__":
    main()